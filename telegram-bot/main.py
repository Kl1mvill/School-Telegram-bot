import json
import threading

from time import sleep
from telebot import TeleBot, types
from config import *
from data.text_messages import *
from datetime import datetime, time, timedelta
from locale import setlocale, LC_ALL

setlocale(category=LC_ALL, locale="Russian")  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã datetime

with open("/telegram-bot/data/registered_users.json", encoding="utf-8") as file:
	registered_users = json.load(file)

with open("/telegram-bot/data/schedules.json", encoding="utf-8") as file:
	schedules = json.load(file)

bot = TeleBot(API_TOKEN, parse_mode="Markdown")


def write_file_registered():
	"""–ó–∞–ø–∏—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª registered_users.json"""
	with open("/telegram-bot/data/registered_users.json", "w", encoding="utf-8") as file:
		json.dump(registered_users, file, ensure_ascii=False)


def checking_user_registered(chat_id: int) -> bool:
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
	if str(chat_id) in registered_users:
		return True
	else:
		bot.send_message(chat_id,
						 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 9–ì, 11–∞, 8–í.")
		return False


def get_lesson_number(number_lessons: int):
	"""–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞"""
	current_time = datetime.now().time()

	if time(0, 0) <= current_time <= time(8, 0): lesson = -1
	elif time(8, 0) <= current_time <= time(8, 40): lesson = 0
	elif time(8, 40) <= current_time <= time(9, 35) and number_lessons >= 2: lesson = 1
	elif time(9, 35) <= current_time <= time(10, 30) and number_lessons >= 3: lesson = 2
	elif time(10, 30) <= current_time <= time(11, 25) and number_lessons >= 4: lesson = 3
	elif time(11, 25) <= current_time <= time(12, 20) and number_lessons >= 5: lesson = 4
	elif time(12, 20) <= current_time <= time(13, 10) and number_lessons >= 6: lesson = 5
	elif time(13, 10) <= current_time <= time(13, 55) and number_lessons >= 7: lesson = 6
	elif time(13, 10) <= current_time <= time(15, 00) and number_lessons >= 8: lesson = 7
	elif time(15, 00) <= current_time <= time(15, 45) and number_lessons >= 9: lesson = 8
	else: lesson = "–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å"

	return lesson


def massMailing(message):
	"""–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
	if message.text == "/exit":
		bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"); return
	elif message.text is not None:
		for id_chat in registered_users.keys():
			bot.send_message(id_chat, message.text)
	elif message.photo is not None:
		for id_chat in registered_users.keys():
			bot.send_photo(id_chat, message.photo[0].file_id, caption=message.caption)
	elif message.audio is not None:
		for id_chat in registered_users.keys():
			bot.send_audio(id_chat, message.audio.file_id, caption=message.caption)
	elif message.document is not None:
		for id_chat in registered_users.keys():
			bot.send_document(id_chat, message.document.file_id, caption=message.caption)
	elif message.video is not None:
		for id_chat in registered_users.keys():
			bot.send_video(id_chat, message.video.file_id, caption=message.caption)
	else:
		bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞"); return

	bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")


def create_schedule(short_version: bool, beautiful_date, schedule_day):
	"""–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
	number = None
	count = 1

	text_message = f"üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {beautiful_date}*\n"

	if schedule_day != "–í—ã—Ö–æ–¥–Ω–æ–π":
		if short_version:
			for value in schedule_day:
				if value == "":
					text_message += "\n\n*–í–Ω–µ—É—Ä–æ—á–∫–∏*"
				else:
					text_message += f"\n{count}. {value}"
					count += 1
		else:
			text_message = f"üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {beautiful_date}*\n"
			number_current_lesson = get_lesson_number(len(schedule_day))

			if schedule_day[number_current_lesson] == "": number = number_current_lesson
			if number is not None: number_current_lesson += 1

			if number_current_lesson == "–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å":
				text_message += "\n*–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å*\n"
			elif number_current_lesson == -1:
				text_message += f"\n*–ë—É–¥–µ—Ç - {schedule_day[0]}*\n"
			else:
				text_message += f"\n*–°–µ–π—á–∞—Å - {schedule_day[number_current_lesson]}*\n"

			for value in schedule_day:
				if value == "":
					text_message += "\n\n*–í–Ω–µ—É—Ä–æ—á–∫–∏*"
				else:
					text_message += f"\n{count}. {value}"
					count += 1

	else:
		text_message += "\n" + schedule_day

	return text_message


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
	today_date = datetime.today()

	user_registered = checking_user_registered(callback.message.chat.id)

	if user_registered:
		user_class = registered_users[str(callback.message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	if callback.data[:8] == "tomorrow":
		day = int(callback.data[8:])

		tomorrow_date = today_date + timedelta(days=day)

		beautiful_date = tomorrow_date.strftime('%d %b. %Y –≥.')  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		schedule = user_schedules[str(tomorrow_date.weekday())]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		markup = types.InlineKeyboardMarkup()

		btn_today = types.InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")
		btn_tomorrow = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"tomorrow{day + 1}")
		if day - 1 != 0:
			btn_yesterday = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"yesterday{day - 1}")
		else:
			btn_yesterday = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="today")

		markup.row(btn_today)
		markup.add(btn_yesterday, btn_tomorrow)

		text_message = create_schedule(True, beautiful_date, schedule)
		text_message += "\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

		bot.send_message(callback.message.chat.id, text_message, reply_markup=markup)


	elif callback.data[:9] == "yesterday":
		day = int(callback.data[9:])

		yesterday_date = today_date + timedelta(days=day)

		beautiful_date = yesterday_date.strftime('%d %b. %Y –≥.')  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		schedule = user_schedules[str(yesterday_date.weekday())]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		markup = types.InlineKeyboardMarkup()

		btn_today = types.InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")

		if day + 1 != 0:
			btn_tomorrow = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"tomorrow{day + 1}")
		else:
			btn_tomorrow = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="today")

		btn_yesterday = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"yesterday{day - 1}")
		markup.row(btn_today)
		markup.add(btn_yesterday, btn_tomorrow)

		text_message = create_schedule(True, beautiful_date, schedule)
		text_message += "\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

		bot.send_message(callback.message.chat.id, text_message, reply_markup=markup)


	elif callback.data == "today":
		beautiful_date = today_date.strftime('%d %b. %Y –≥.')  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		schedule = user_schedules[str(today_date.weekday())]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		markup = types.InlineKeyboardMarkup()

		btn_tomorrow = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="tomorrow1")
		btn_yesterday = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="yesterday-1")

		markup.row(btn_yesterday, btn_tomorrow)

		text_message = create_schedule(False, beautiful_date, schedule)
		text_message += "\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."

		bot.send_message(callback.message.chat.id, text_message, parse_mode='Markdown', reply_markup=markup)


	elif callback.data == "teachers_1_sheet":
		markup = types.InlineKeyboardMarkup()

		btn_today = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="teachers_2_sheet")
		markup.add(btn_today)

		bot.send_message(callback.message.chat.id, teachers_text_message, parse_mode='Markdown',
						 reply_markup=markup)

	elif callback.data == "teachers_2_sheet":
		markup = types.InlineKeyboardMarkup()

		btn_today = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="teachers_1_sheet")
		markup.add(btn_today)

		bot.send_message(callback.message.chat.id, teachers_text_message_2, parse_mode='Markdown',
						 reply_markup=markup)


@bot.message_handler(commands=["start"])
def start_message(message):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫."""

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

	btn_today = types.KeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
	btn_help = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
	btn_calls = types.KeyboardButton("üîî –ó–≤–æ–Ω–∫–∏")

	markup.row(btn_today)
	markup.add(btn_calls, btn_help)

	bot.send_message(message.chat.id, start_text_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() in ("‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "/help", "help"))
def help_message(message):
	"""–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
	bot.send_message(message.chat.id, help_text_message, disable_web_page_preview=True)


@bot.message_handler(func=lambda message: message.text.lower() in schedules.keys())
def register(message):
	registered_users[str(message.chat.id)] = message.text.lower()

	bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")


@bot.message_handler(func=lambda message: message.text.lower() in ("üìö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "/today"))
def today(message):
	"""–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	today_date = datetime.today()
	schedule_day = user_schedules[str(today_date.weekday())]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
	beautiful_date = today_date.strftime("%d %b. %Y –≥.")  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

	markup = types.InlineKeyboardMarkup()

	btn_tomorrow = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="tomorrow1")
	btn_yesterday = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="yesterday-1")

	markup.row(btn_yesterday, btn_tomorrow)

	text_message = create_schedule(False, beautiful_date, schedule_day)
	text_message += "\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."

	bot.send_message(message.chat.id, text_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() in ("/tomorrow", "–∑–∞–≤—Ç—Ä–∞", "tomorrow"))
def tomorrow(message):
	"""–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å"""
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	tomorrow_date = datetime.today() + timedelta(days=1)
	schedule_day = user_schedules[str(tomorrow_date.weekday())]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
	beautiful_date = tomorrow_date.strftime("%d %b. %Y –≥.")  # –í—ã–≤–æ–¥ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

	markup = types.InlineKeyboardMarkup()

	btn_today = types.InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")

	markup.add(btn_today)

	text_message = create_schedule(True, beautiful_date, schedule_day)
	text_message += "\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

	bot.send_message(message.chat.id, text_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() in ("/calls", "calls", "–∑–≤–æ–Ω–∫–∏", "–∑–≤–æ–Ω–æ–∫", "üîî –∑–≤–æ–Ω–∫–∏"))
def calls(message):
	"""–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"""
	markup = types.InlineKeyboardMarkup()
	btn_today = types.InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")
	markup.add(btn_today)

	bot.send_message(message.chat.id, calls_text_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() in ("/teachers", "teachers", "—É—á–∏—Ç–µ–ª—è"))
def teachers(message):
	"""–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π"""
	markup = types.InlineKeyboardMarkup()

	btn_today = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="teachers_2_sheet")

	markup.add(btn_today)

	bot.send_message(message.chat.id, teachers_text_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() in ("/groups", "groups", "–≥—Ä—É–ø–ø—ã"))
def groups(message):
	"""–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç –∏—Ö –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –æ–Ω–∏ —Å–µ–π—á–∞—Å"""
	bot.send_message(message.chat.id,
					 "–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –∏—Ö –∫–∞–±–∏–Ω–µ—Ç, –∫–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")


@bot.message_handler(func=lambda message: message.text.lower() in ("/person", "person"))
def person(message):
	bot.send_message(message.chat.id,
					 "–¢—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π –∏–ª–∏ –∫–ª–∞—Å—Å—ã –∏ —É–∑–Ω–∞—Ç—å –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, /person 9–≥ –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 9–≥")


@bot.message_handler(
	func=lambda message: message.text.lower() in ("/extralesson", "extralesson", "–¥–æ–ø—ã", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"))
def extraLesson(message):
	bot.send_message(message.chat.id, "–í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å—é–¥–∞")


@bot.message_handler(func=lambda message: message.text.lower() in ("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ø–Ω", "monday", "/monday", "mon"))
def monday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", user_schedules["0"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("–≤—Ç–æ—Ä–Ω–∏–∫", "–≤—Ç", "tuesday", "/tuesday", "tue"))
def tuesday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "–≤—Ç–æ—Ä–Ω–∏–∫", user_schedules["1"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("—Å—Ä–µ–¥–∞", "—Å—Ä", "wednesday", "/wednesday", "wed"))
def wednesday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "—Å—Ä–µ–¥—É", user_schedules["2"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("—á–µ—Ç–≤–µ—Ä–≥", "—á—Ç", "thursday", "/thursday", "thu"))
def thursday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "—á–µ—Ç–≤–µ—Ä–≥", user_schedules["3"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("–ø—è—Ç–Ω–∏—Ü–∞", "–ø—Ç", "friday", "/friday", "fri"))
def friday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "–ø—è—Ç–Ω–∏—Ü—É", user_schedules["4"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("—Å—É–±–±–æ—Ç–∞", "—Å–±", "saturday", "/saturday", "sat"))
def saturday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "—Å—É–±–±–æ—Ç—É", user_schedules["5"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–≤—Å", "sunday", "/sunday", "sun"))
def sunday(message):
	user_registered = checking_user_registered(message.chat.id)

	if user_registered:
		user_class = registered_users[str(message.chat.id)]
		user_schedules = schedules[user_class]
	else:
		return

	text_message = create_schedule(True, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", user_schedules["6"])

	bot.send_message(message.chat.id, text_message)


@bot.message_handler(func=lambda message: message.text.lower() in ("/links", "links", "—Å—Å—ã–ª–∫–∏"))
def links(message):
	bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∏ –Ω–∞ —à–∫–æ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã")


@bot.message_handler(func=lambda message: message.text.lower() in (
		"/changeclass", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "register", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "changeclass"))
def changeClass(message):
	bot.send_message(message.chat.id,
					 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 9–ì, 11–∞, 8–í.")


@bot.message_handler(commands=["save_data"])
def saveData(message):
	if message.chat.id not in ADMINS: return

	write_file_registered()
	bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


@bot.message_handler(commands=["massMailing"])
def massMailing_message(message):
	if message.chat.id not in ADMINS: return

	message = bot.send_message(message.chat.id,
							   "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ—ë –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n*–ö —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –ø–æ–∫–∞–∂—É—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.*\n\n*–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ /exit*")

	bot.register_next_step_handler(message, massMailing)


@bot.message_handler(func=lambda message: True,
					 content_types=['audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact',
									'sticker'])
def default_command(message):
	bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ—á–∏—Ç–∞–π—Ç–µ /help")



def updating_data():
	while True:
		sleep(3_600)
		write_file_registered()


threading.Thread(target=updating_data, daemon=True).start()


"–ò–¥–µ—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –≤ –±–æ—Ç–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ 9–≥ –∏ 8–≤."
if __name__ == "__main__":
	bot.infinity_polling()
